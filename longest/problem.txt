1. Obtain C or C++ tools that work reliably. Use the strictest standards-conforming mode you can find, and do not use any nonstandard compiler extensions. Eliminate as many compiler warnings as you can. We prefer that you use either C89 or C99. If you must use C++, use basic features and avoid use of STL.
 
2. Find a newline-delimited word list file. On Linux or MacOS systems this would typically be the file /usr/dict/words or /usr/share/dict/words. You may also be able to find a similar word list on the internet as the open source project "yawl-0.3.2" or similar. https://raw.githubusercontent.com/eneko/data-repository/master/data/words.txt is one list. Your word list file should not contain duplicate words.
 
3. Write a one-file C or C++ program. Name it (first_name)_(last_name)_longest.c. Your program should print out the 10 longest words from the words file. Words can be printed in any order, and if there are multiple words tied for 10th longest print any of those that are tied for that length. Your program should read the name of the words file from the command line, and print results to stdout.
 
# invoke the program as (with whatever words file you use)
% ./a.out /usr/share/dict/words
 
4.The program must work correctly. This is intended to be a fairly quick exercise -- we are looking for correct but not polished code. You may not use built-in sorting or search functions (e.g. no ‘qsort()’ or ‘bsearch()’)
 
5. Please send your code and how much time you spent to make it work (not including set up time) to chris.chang@ghs.com.
