(2016-12-09) Lukasz Plewa (l.plewa@adbglobal.com)
[ONEM-1195] New library implementation for controlling fron panel indicators

Index: git/dsFPD.c
===================================================================
--- git.orig/dsFPD.c	2016-12-14 15:04:57.171715785 +0100
+++ git/dsFPD.c	2016-12-14 15:06:27.851719549 +0100
@@ -13,12 +13,22 @@
 #include <stdio.h>
 #include <string.h>
 #include "dsFPD.h"
-#include "fpd_defs.h"
-#include "mfr_fpd.h"
 #include "nexus_platform.h"
 #ifdef HAS_NO_FPD_API_SUPPORT
 #include "nexus_types.h"
 #include "nexus_led.h"
+#else
+#include "mfr_fpd_lgi.h"
+#include "dsFPDSettings.h"
+#endif
+
+#ifdef FPD_DEBUG
+#include "dshallogger.h"
+#else
+#define DEBUG(...)
+#define ERROR(...)
+#define WARN(...)
+#define INFO(...)
 #endif
 
 #ifdef RDK_USE_NXCLIENT
@@ -56,14 +66,12 @@
 
 FPD_INDICATOR getIndicatorID (dsFPDIndicator_t dsFPDId)
 {
-    FPD_INDICATOR indicator = FPD_INDICATOR_RFBYPASS;
+    FPD_INDICATOR indicator = FPD_INDICATOR_POWER;
     switch (dsFPDId)
     {
-        case dsFPD_INDICATOR_MESSAGE: indicator = FPD_INDICATOR_MESSAGE; break;
         case dsFPD_INDICATOR_POWER: indicator = FPD_INDICATOR_POWER; break;
-        case dsFPD_INDICATOR_RECORD: indicator = FPD_INDICATOR_RECORD; break;
-        case dsFPD_INDICATOR_REMOTE: indicator = FPD_INDICATOR_REMOTE; break; 
-		case dsFPD_INDICATOR_RFBYPASS: indicator = FPD_INDICATOR_RFBYPASS; break; 
+        case dsFPD_INDICATOR_NETWORK: indicator = FPD_INDICATOR_NETWORK; break;
+        case dsFPD_INDICATOR_WIFI: indicator = FPD_INDICATOR_WIFI; break;
 		default: break;
     }
     return indicator;
@@ -79,6 +87,7 @@
         case dsFPD_COLOR_RED     : colorID = FPD_COLOR_RED; break;
         case dsFPD_COLOR_YELLOW  : colorID = FPD_COLOR_YELLOW; break; 
         case dsFPD_COLOR_ORANGE  : colorID = FPD_COLOR_ORANGE; break;
+        case dsFPD_COLOR_WHITE   : colorID = FPD_COLOR_WHITE; break;
         default: break;
     }
     return colorID;
@@ -96,10 +105,10 @@
     if (FPD_API_RESULT_SUCCESS == ret)
     m_isPlatFpdInitialized = true;
     else
-    printf("Front panel init failed\n");
+      ERROR("Front panel init failed\n");
     }
     else
-    printf("Front panel already inited\n");
+      INFO("Front panel already inited\n");
 
     return mapFPDReturnCodes(ret);
 
@@ -121,12 +130,12 @@
 
     if (FPD_API_RESULT_SUCCESS == ret)
     {
-        printf("Front Panel uninited successfully\n");
+        INFO("Front Panel uninited successfully\n");
         m_isPlatFpdInitialized = false;
     }
     else
     {
-        printf ("Failed to uninit Front Panel\n");
+        ERROR("Failed to uninit Front Panel\n");
     }
 
     return mapFPDReturnCodes(ret);
@@ -142,10 +151,10 @@
     if (!m_isPlatFpdInitialized)
         return dsERR_INVALID_STATE;
 
-    /*printf ("LED[%d] blink %d times for %d long\n", eIndicator, uBlinkIterations, uBlinkDuration);*/
+    DEBUG ("LED[%d] blink %d times for %d long\n", eIndicator, uBlinkIterations, uBlinkDuration);
     FPD_API_RESULT ret = FPD_SetBlink (getIndicatorID(eIndicator), uBlinkDuration, uBlinkIterations);
 
-	//printf ("%d : ret value...\n", ret);
+    DEBUG("%d : ret value...\n", ret);
     return mapFPDReturnCodes(ret);
 #else
     return dsERR_OPERATION_NOT_SUPPORTED;
@@ -165,11 +174,11 @@
         if (eBrightness > dsFPD_BRIGHTNESS_MAX)
             return dsERR_INVALID_PARAM;
 
-        /*printf ("LED[%d]-%d brightness = %d\n", eIndicator,getIndicatorID(eIndicator), eBrightness);*/
+        DEBUG ("LED[%d]-%d brightness = %d\n", eIndicator,getIndicatorID(eIndicator), eBrightness);
         
 		FPD_API_RESULT ret = FPD_SetBrightness (getIndicatorID(eIndicator), eBrightness);
 
-		//printf ("%d : ret value...\n", ret);
+		DEBUG("%d : ret value...\n", ret);
 
 		return mapFPDReturnCodes(ret);
     }
@@ -200,7 +209,7 @@
             return dsERR_INVALID_PARAM;
 
         FPD_API_RESULT ret = FPD_GetBrightness(getIndicatorID(eIndicator), (FPD_BRIGHTNESS*) pBrightness);
-       //printf ("%d : ret value...\n", ret);
+        DEBUG("%d : ret value...\n", ret);
 
         return mapFPDReturnCodes(ret);
 
@@ -214,6 +223,49 @@
 #endif   
 }
 
+dsError_t dsGetFPState(dsFPDIndicator_t eIndicator, dsFPDState_t* state)
+{
+#ifdef HAS_FPD_API_SUPPORT
+  if (!m_isPlatFpdInitialized)
+    return dsERR_INVALID_STATE;
+
+  if (eIndicator < dsFPD_INDICATOR_MAX)
+  {
+    FPD_API_RESULT ret = FPD_GetState(getIndicatorID(eIndicator), (bool*)state);
+    DEBUG("%s - State = %d, ret = %d\n", __FUNCTION__, *state, ret);
+    return mapFPDReturnCodes(ret);
+  }
+  else
+  {
+      return dsERR_INVALID_PARAM;
+  }
+#else
+  return dsERR_OPERATION_NOT_SUPPORTED;
+#endif
+}
+
+
+dsError_t dsSetFPState(dsFPDIndicator_t eIndicator, dsFPDState_t state)
+{
+#ifdef HAS_FPD_API_SUPPORT
+  if (!m_isPlatFpdInitialized)
+    return dsERR_INVALID_STATE;
+
+  if (eIndicator < dsFPD_INDICATOR_MAX)
+  {
+    FPD_API_RESULT ret = FPD_SetState(getIndicatorID(eIndicator), (bool)state);
+    DEBUG("%s - State = %d, ret = %d\n", __FUNCTION__, state, ret);
+    return mapFPDReturnCodes(ret);
+  }
+  else
+  {
+      return dsERR_INVALID_PARAM;
+  }
+#else
+  return dsERR_OPERATION_NOT_SUPPORTED;
+#endif
+}
+
 dsError_t dsSetFPColor (dsFPDIndicator_t eIndicator, dsFPDColor_t eColor)
 {
 #ifdef HAS_FPD_API_SUPPORT
@@ -222,10 +274,10 @@
 
     if (eIndicator < dsFPD_INDICATOR_MAX)
     {
-        /*printf ("LED[%d] color is changed to colorIndex[%d]\n", eIndicator, eColor);*/
+        DEBUG ("LED[%d] color is changed to colorIndex[%d]\n", eIndicator, eColor);
         FPD_API_RESULT ret = FPD_SetColor(getIndicatorID(eIndicator), getColorID(eColor));
 
-		//printf ("%d : ret value...\n", ret);
+		DEBUG ("%d : ret value...\n", ret);
         return mapFPDReturnCodes(ret);
 
     }
@@ -242,7 +294,7 @@
 dsError_t dsSetFPTime (dsFPDTimeFormat_t eTimeFormat, const unsigned int uHour, const unsigned int uMinutes)
 {
   
-#ifdef HAS_FPD_API_SUPPORT
+#if defined (HAS_FPD_API_SUPPORT) && defined (HAS_CLOCK_DISPLAY)
     FPD_TIME time = FPD_TIME_12_HOUR;
     unsigned int logHour = uHour;
 
@@ -251,7 +303,7 @@
         logHour = uHour - 12;
     }
 
-    printf ("%s time Format used and the time is [%02d:%02d]\n", (eTimeFormat == dsFPD_TIME_12_HOUR ? "12 Hr" : "24 Hr"),logHour,uMinutes);
+    DEBUG ("%s time Formart used and the time is [%d:%d]\n", (eTimeFormat == dsFPD_TIME_12_HOUR ? "12 Hr" : "24 Hr"), uHour, uMinutes);
 
     if (!m_isPlatFpdInitialized)
         return dsERR_INVALID_STATE;
@@ -277,7 +329,7 @@
 dsError_t dsSetFPText(const char* pText)
 {
    
-#ifdef HAS_FPD_API_SUPPORT
+#if defined (HAS_FPD_API_SUPPORT) && defined (HAS_CLOCK_DISPLAY)
     if (!m_isPlatFpdInitialized)
         return dsERR_INVALID_STATE;
 
@@ -285,7 +337,7 @@
 	FPD_API_RESULT ret = FPD_SetText((char *) pText);
 
 
-	//printf ("%d : ret value...\n", ret);
+	//DEBUG ("%d : ret value...\n", ret);
 
     return mapFPDReturnCodes(ret);
 #else
@@ -296,13 +348,13 @@
 dsError_t dsSetFPScroll(unsigned int uScrollHoldOnDur, unsigned int uHorzScrollIterations, unsigned int uVertScrollIterations)
 {
     
-#ifdef HAS_FPD_API_SUPPORT
+#if defined (HAS_FPD_API_SUPPORT) && defined (HAS_CLOCK_DISPLAY)
     if (!m_isPlatFpdInitialized)
         return dsERR_INVALID_STATE;
 
      FPD_API_RESULT ret = FPD_SetScroll (uScrollHoldOnDur, uHorzScrollIterations, uVertScrollIterations);
 
-	//printf ("%d : ret value...\n", ret);
+	//DEBUG ("%d : ret value...\n", ret);
 
     return mapFPDReturnCodes(ret);
 #else
@@ -315,7 +367,7 @@
 dsError_t dsSetFPTextBrightness (dsFPDTextDisplay_t eIndicator, dsFPDBrightness_t eBrightness)
 {
 
-#ifdef HAS_FPD_API_SUPPORT 
+#if defined (HAS_FPD_API_SUPPORT) && defined (HAS_CLOCK_DISPLAY)
 	FPD_INDICATOR indicator = FPD_INDICATOR_RFBYPASS;
 
 	if (!m_isPlatFpdInitialized)
@@ -334,11 +386,11 @@
 				default: break;
 			}
 
-		/*printf ("LED[%d]-%d brightness = %d\n", eIndicator,indicator, eBrightness);*/
+		/*DEBUG ("LED[%d]-%d brightness = %d\n", eIndicator,indicator, eBrightness);*/
 
         FPD_API_RESULT ret = FPD_SetBrightness (indicator,eBrightness);
 
-		//printf ("%d : ret value...\n", ret);
+		//DEBUG ("%d : ret value...\n", ret);
 		return mapFPDReturnCodes(ret);
     }
     else
@@ -352,9 +404,9 @@
 
 dsError_t dsFPEnableCLockDisplay (int enable)
 {
-#ifdef HAS_FPD_API_SUPPORT 
+#if defined (HAS_FPD_API_SUPPORT) && defined (HAS_CLOCK_DISPLAY)
 	FPD_API_RESULT ret = FPD_clockDisplay(enable);
-	//printf ("dsSetFPTextDisplay enable = %d\n",enable);
+	//DEBUG ("dsSetFPTextDisplay enable = %d\n",enable);
     return mapFPDReturnCodes(ret);
 #else
     return dsERR_OPERATION_NOT_SUPPORTED;
@@ -384,13 +436,13 @@
         isPlatFpdInitialized = 1;
     }
 
-    printf("_SetNexusLEDBrightness : RGB Values are %d-%d-%d \r\n",red,green,blue);
+    DEBUG("_SetNexusLEDBrightness : RGB Values are %d-%d-%d \r\n",red,green,blue);
 
     switch (eIndicator)
     {
     
         case dsFPD_INDICATOR_POWER:
-            printf("NEXUS_Led_SetIndicatorBrightness Power: RGB Values are %d-%d-%d \r\n",red,green,blue);
+            DEBUG("NEXUS_Led_SetIndicatorBrightness Power: RGB Values are %d-%d-%d \r\n",red,green,blue);
             if (eBrightness > 0)
             {
                 powerStatus = 1;
Index: git/Makefile.am
===================================================================
--- git.orig/Makefile.am	2016-12-14 15:04:57.171715785 +0100
+++ git/Makefile.am	2016-12-14 15:04:57.167715785 +0100
@@ -12,7 +12,8 @@
     dshallogger.c \
     dsHdmiIn.c \
     nscclient.c \
-    mfr_hdmi_in.c
+    mfr_hdmi_in.c \
+    mfr_fpd_lgi.c
 
 include ${PKG_CONFIG_SYSROOT_DIR}/usr/include/platform_app.inc
 
Index: git/dshallogger.c
===================================================================
--- git.orig/dshallogger.c	2016-12-14 15:04:57.171715785 +0100
+++ git/dshallogger.c	2016-12-14 15:04:57.167715785 +0100
@@ -9,7 +9,7 @@
     logCb = cb;
 }
 
-int log(int priority,const char *format, ...)
+int ds_hal_log(int priority,const char *format, ...)
 {
     char tmp_buff[MAX_LOG_BUFF];
     va_list args;
